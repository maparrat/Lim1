/* Generated By:JavaCC: Do not edit this line. RobotParser.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.io.*;


@SuppressWarnings("serial")
public class RobotParser implements RobotParserConstants {
   class Variable {


        private String nombre;

        private Integer numero;


        public Variable( String pNombre)
        {
                nombre = pNombre;
                numero = 0;


        }

        public String getNombre() {
                return nombre;
        }
        public Integer getNumero() {
                return numero;
        }

        public void setNombre(String nombre) {
                this.nombre = nombre;
        }

        public void setNumero(Integer numero) {
                this.numero = numero;
        }
}

        private RobotWorldDec robotw;
         private Variable[] store;
         private int eax;

        void setWorld(RobotWorld w) {
                robotw = (RobotWorldDec) w;
                 store = new Variable[100];
        }

    void delay(int d) {
                                try {
                                        Thread.sleep(d);
                                    } catch (InterruptedException e) {
                                        System.err.format("IOException: %s%n", e);
                                    }

    }

  final public boolean instructions(StringBuffer system) throws ParseException {
                                String output=new String();
    secuencia();
            {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

  final public void secuencia() throws ParseException {
    jj_consume_token(ROBOT_R);
    jj_consume_token(VARS);
    var();
    instrucion();
  }

  final public void var() throws ParseException {
    varF();
    jj_consume_token(49);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case name:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      varF();
    }
  }

  final public void varF() throws ParseException {
Token variableToken =  new Token();
    jj_consume_token(name);
    variableToken = jj_consume_token(name);
          String cadena  = variableToken.image;
   boolean encontro = false;
   int contador = 0;
   while (encontro == false)
   {
     if(store[contador] ==   null )
     {
       Variable variablex= new Variable(cadena);
       store[contador] = variablex;
     }
     contador++;
   }
  }

  final public void instrucion() throws ParseException {
    jj_consume_token(BEGIN);
    intru();
    jj_consume_token(50);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case skip:
      case REPEAT:
      case IF:
      case WHILE:
      case assing:
      case move:
      case turn:
      case face:
      case put:
      case pick:
      case name:
      case numero:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      intru();
    }
  }

  final public void intru() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case skip:
    case assing:
    case move:
    case turn:
    case face:
    case put:
    case pick:
    case name:
    case numero:
      command();
      break;
    case REPEAT:
    case IF:
    case WHILE:
      controlStructure();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void command() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case assing:
      assing();
      break;
    case name:
    case numero:
      move();
      break;
    case turn:
      turn();
      break;
    case face:
      face();
      break;
    case put:
      put();
      break;
    case pick:
      pick();
      break;
    case move:
      moveTD();
      break;
    case skip:
      jj_consume_token(skip);

      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void assing() throws ParseException {
  int numero = 0;
  Token tokenNombre;
  Token tokenNumero;
  String nombre;
    jj_consume_token(assing);
    jj_consume_token(51);
    jj_consume_token(numero);
    jj_consume_token(to);
    jj_consume_token(51);
    jj_consume_token(name);
    tokenNombre = jj_consume_token(numero);
    tokenNumero = jj_consume_token(name);
        try
        {
          int  pNumero = Integer.parseInt(tokenNumero.image);
          boolean encontro = false;
          int contador = 0;
         while(encontro = false ||contador < store.length )
         {
           if(store[contador].getNombre() == tokenNombre.image)
           {
             store[contador].setNumero(pNumero);
             encontro = true;

           }
                contador++;
         }

        }
        catch(Exception e)
        {

        }
  }

  final public void move() throws ParseException {
  Token nmovimientos = new Token() ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numero:
      jj_consume_token(numero);
      break;
    case name:
      jj_consume_token(name);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numero:
      nmovimientos = jj_consume_token(numero);
      break;
    case name:
      jj_consume_token(name);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   try
   {
     int movimiento = Integer.parseInt(nmovimientos.image);

      robotw.moveForward(movimiento);

   }
   catch (NumberFormatException excepcion)
   {
    int contador = 0;
    boolean encontro = true;
    int veces = 0;
    while( contador < store.length|| encontro == false)
    {
      if(store[contador].getNombre().equals(nmovimientos.image))
      {
        veces = store[contador].getNumero();
        if (veces != 0)
        {
           robotw.moveForward(veces);
        }
        encontro = true;
      }
      contador ++;

    }
   }
  }

  final public void turn() throws ParseException {
  Token direccionT = new Token();
    jj_consume_token(turn);
    jj_consume_token(51);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case rigth:
      jj_consume_token(rigth);
      break;
    case left:
      jj_consume_token(left);
      break;
    case around:
      jj_consume_token(around);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case rigth:
      direccionT = jj_consume_token(rigth);
      break;
    case left:
      jj_consume_token(left);
      break;
    case around:
      jj_consume_token(around);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   String direccion= direccionT.image;
   if(direccion.equals("right"))
   {
        robotw.turnRight();
   }
   else if (direccion.equals("left"))
   {
     robotw.turnRight();
     robotw.turnRight();
     robotw.turnRight();
   }
      else if (direccion.equals("around"))
   {
     robotw.turnRight();
     robotw.turnRight();

   }
  }

  final public void face() throws ParseException {
  Token direccionT = new Token();
    jj_consume_token(face);
    jj_consume_token(51);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case north:
      jj_consume_token(north);
      break;
    case south:
      jj_consume_token(south);
      break;
    case east:
      jj_consume_token(east);
      break;
    case west:
      jj_consume_token(west);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case north:
      direccionT = jj_consume_token(north);
      break;
    case south:
      jj_consume_token(south);
      break;
    case east:
      jj_consume_token(east);
      break;
    case west:
      jj_consume_token(west);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   String direccion= direccionT.image;
   if(direccion.equals("north"))
   {
     robotw.facingNorth();
   }
    else  if(direccion.equals("south"))
   {
     robotw.facingSouth();
   }
    else if(direccion.equals("west"))
   {
     robotw.facingWest();
   }
    else if(direccion.equals("east"))
   {
     robotw.facingEast();
   }
  }

  final public void put() throws ParseException {
  Token cantidadT = new Token();
  Token objetoT = new Token();
    jj_consume_token(put);
    jj_consume_token(51);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numero:
      jj_consume_token(numero);
      break;
    case name:
      jj_consume_token(name);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(of);
    jj_consume_token(51);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Balloons:
      jj_consume_token(Balloons);
      break;
    case Chips:
      jj_consume_token(Chips);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numero:
      cantidadT = jj_consume_token(numero);
      break;
    case name:
      jj_consume_token(name);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Balloons:
      objetoT = jj_consume_token(Balloons);
      break;
    case Chips:
      jj_consume_token(Chips);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   try
   {
      int  pNumero = Integer.parseInt(cantidadT.image);


        if(objetoT.image.equals("Balloons"))
        {
          robotw.putBalloons(pNumero);
        }
        else  if(objetoT.image.equals("Chips"))
        {
          robotw.putChips(pNumero);
        }

   }
  catch (NumberFormatException excepcion)
   {
     int numero =0;
     boolean encontrado = false;
     for(int i = 0; i < store.length|| encontrado == false; i++)
     {
       if(store[i].getNombre().equals(cantidadT.image))
       {

          if(objetoT.image.equals("Balloons"))
        {
          robotw.putBalloons(store[i].getNumero());
        }
        else  if(objetoT.image.equals("Chips"))
        {
          robotw.putChips(store[i].getNumero());
        }

         encontrado = true;
       }
     }
   }
  }

  final public void pick() throws ParseException {
   Token cantidadT = new Token();
  Token objetoT = new Token();
    jj_consume_token(pick);
    jj_consume_token(51);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numero:
      jj_consume_token(numero);
      break;
    case name:
      jj_consume_token(name);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(of);
    jj_consume_token(51);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Balloons:
      jj_consume_token(Balloons);
      break;
    case Chips:
      jj_consume_token(Chips);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numero:
      cantidadT = jj_consume_token(numero);
      break;
    case name:
      jj_consume_token(name);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Balloons:
      objetoT = jj_consume_token(Balloons);
      break;
    case Chips:
      jj_consume_token(Chips);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   try
   {
      int  pNumero = Integer.parseInt(cantidadT.image);


        if(objetoT.image.equals("Balloons"))
        {
          robotw.grabBalloons(pNumero);
        }
        else  if(objetoT.image.equals("Chips"))
        {
          robotw.pickChips(pNumero);
        }

   }
  catch (NumberFormatException excepcion)
   {
     int numero =0;
     boolean encontrado = false;
     for(int i = 0; i < store.length|| encontrado == false; i++)
     {
       if(store[i].getNombre().equals(cantidadT.image))
       {

          if(objetoT.image.equals("Balloons"))
        {
          robotw.grabBalloons(store[i].getNumero());
        }
        else  if(objetoT.image.equals("Chips"))
        {
          robotw.pickChips(store[i].getNumero());
        }

         encontrado = true;
       }
     }
   }
  }

  final public void moveT() throws ParseException {
  Token direccionT = new Token();
    jj_consume_token(toThe);
    jj_consume_token(51);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case rigth:
      jj_consume_token(rigth);
      break;
    case left:
      jj_consume_token(left);
      break;
    case around:
      jj_consume_token(around);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case rigth:
      direccionT = jj_consume_token(rigth);
      break;
    case left:
      jj_consume_token(left);
      break;
    case around:
      jj_consume_token(around);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   if(robotw.getOrientation() == 0)
   {
     robotw.facingNorth();
     robotw.moveForward(eax);

   }
      if(robotw.getOrientation() == 1)
   {
     robotw.facingSouth();
     robotw.moveForward(eax);

   }
      if(robotw.getOrientation() == 2)
   {
     robotw.facingEast();
     robotw.moveForward(eax);

   }
      if(robotw.getOrientation() == 3)
   {
     robotw.facingWest();
     robotw.moveForward(eax);

   }
  }

  final public void moveD() throws ParseException {
    jj_consume_token(inDir);
    jj_consume_token(51);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case north:
      jj_consume_token(north);
      break;
    case south:
      jj_consume_token(south);
      break;
    case east:
      jj_consume_token(east);
      break;
    case west:
      jj_consume_token(west);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

//Move general
  final public void moveTD() throws ParseException {
  Token num = new Token();
    jj_consume_token(move);
    jj_consume_token(51);
    jj_consume_token(numero);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case toThe:
      moveT();
      break;
    case inDir:
      moveD();
      break;
    case name:
    case numero:
      move();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    num = jj_consume_token(numero);
     eax = Integer.parseInt(num.image);
  }

  final public void controlStructure() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      conditional();
      break;
    case WHILE:
      loop();
      break;
    case REPEAT:
      RepeatTimes();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void conditional() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(51);
    condicion();
    jj_consume_token(THEN);
    jj_consume_token(51);
    intru();
    jj_consume_token(ELSE);
    intru();

  }

  final public void loop() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(51);
    condicion();
    jj_consume_token(51);
    intru();

  }

  final public void RepeatTimes() throws ParseException {
    jj_consume_token(REPEAT);
    jj_consume_token(51);
    intru();
    jj_consume_token(TIMES);
    jj_consume_token(51);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numero:
      jj_consume_token(numero);
      break;
    case name:
      jj_consume_token(name);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  final public void condicion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case facing:
      facing();
      break;
    case canPut:
      canPut();
      break;
    case canPick:
      canPick();
      break;
    case canMove:
      canMove();
      break;
    case not:
      not();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void facing() throws ParseException {
    jj_consume_token(facing);
    jj_consume_token(51);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case north:
      jj_consume_token(north);
      break;
    case south:
      jj_consume_token(south);
      break;
    case east:
      jj_consume_token(east);
      break;
    case west:
      jj_consume_token(west);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  final public void canPut() throws ParseException {
    jj_consume_token(canPut);
    jj_consume_token(51);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numero:
      jj_consume_token(numero);
      break;
    case name:
      jj_consume_token(name);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(of);
    jj_consume_token(51);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Balloons:
      jj_consume_token(Balloons);
      break;
    case Chips:
      jj_consume_token(Chips);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  final public void canPick() throws ParseException {
    jj_consume_token(canPick);
    jj_consume_token(51);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numero:
      jj_consume_token(numero);
      break;
    case name:
      jj_consume_token(name);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(of);
    jj_consume_token(51);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Balloons:
      jj_consume_token(Balloons);
      break;
    case Chips:
      jj_consume_token(Chips);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  final public void canMove() throws ParseException {
    jj_consume_token(canMove);
    jj_consume_token(51);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case north:
      jj_consume_token(north);
      break;
    case south:
      jj_consume_token(south);
      break;
    case east:
      jj_consume_token(east);
      break;
    case west:
      jj_consume_token(west);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  final public void not() throws ParseException {
    jj_consume_token(not);
    jj_consume_token(51);
    condicion();

  }

  /** Generated Token Manager. */
  public RobotParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x7ed20000,0x7ed20000,0x7e020000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000,0x0,0x18000,0x0,0x18000,0x0,0x18000,0x0,0x0,0x0,0x0,0xd00000,0x0,0x0,0x0,0x0,0x18000,0x0,0x18000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8000,0x18000,0x18000,0x18000,0x18000,0x18000,0x38,0x38,0x3c0,0x3c0,0x18000,0x0,0x18000,0x0,0x18000,0x0,0x18000,0x0,0x38,0x38,0x3c0,0x18006,0x0,0x18000,0x7c00,0x3c0,0x18000,0x0,0x18000,0x0,0x3c0,};
   }

  /** Constructor with InputStream. */
  public RobotParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RobotParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobotParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RobotParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobotParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RobotParser(RobotParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
